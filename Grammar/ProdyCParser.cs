//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ProdyC.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class ProdyCParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, OE=5, CE=6, OB=7, CB=8, AT=9, SEP=10, 
		PLUS=11, MINUS=12, MULT=13, DIV=14, AND=15, OR=16, NOT=17, EQ=18, LT=19, 
		GT=20, LE=21, GE=22, NE=23, BOOL_TRUE=24, BOL_FALSE=25, IF=26, WHILE=27, 
		DO=28, FOR=29, FUNCTION=30, RETURN=31, THEN=32, ELSE=33, WRITE=34, READ=35, 
		STR=36, EOL=37, NUM=38, VAR=39, COMMENT=40, WS=41;
	public const int
		RULE_prog = 0, RULE_functions = 1, RULE_function = 2, RULE_fnBlock = 3, 
		RULE_fnBody = 4, RULE_params = 5, RULE_line = 6, RULE_funcInvoc = 7, RULE_stmt = 8, 
		RULE_input = 9, RULE_output = 10, RULE_tipo = 11, RULE_ifst = 12, RULE_whilest = 13, 
		RULE_forst = 14, RULE_block = 15, RULE_cond = 16, RULE_atrib = 17, RULE_expr = 18, 
		RULE_term = 19, RULE_factor = 20;
	public static readonly string[] ruleNames = {
		"prog", "functions", "function", "fnBlock", "fnBody", "params", "line", 
		"funcInvoc", "stmt", "input", "output", "tipo", "ifst", "whilest", "forst", 
		"block", "cond", "atrib", "expr", "term", "factor"
	};

	private static readonly string[] _LiteralNames = {
		null, "'int'", "'string'", "'float'", "'bool'", "'('", "')'", "'{'", "'}'", 
		"'='", "','", "'+'", "'-'", "'*'", "'/'", "'&&'", "'||'", "'!'", "'=='", 
		"'<'", "'>'", "'<='", "'>='", "'!='", "'true'", "'false'", null, null, 
		null, null, null, null, null, null, null, null, null, "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "OE", "CE", "OB", "CB", "AT", "SEP", "PLUS", 
		"MINUS", "MULT", "DIV", "AND", "OR", "NOT", "EQ", "LT", "GT", "LE", "GE", 
		"NE", "BOOL_TRUE", "BOL_FALSE", "IF", "WHILE", "DO", "FOR", "FUNCTION", 
		"RETURN", "THEN", "ELSE", "WRITE", "READ", "STR", "EOL", "NUM", "VAR", 
		"COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ProdyC.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ProdyCParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ProdyCParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ProdyCParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
	 
		public ProgContext() { }
		public virtual void CopyFrom(ProgContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ProgLineContext : ProgContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionsContext functions() {
			return GetRuleContext<FunctionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ProgLineContext(ProgContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterProgLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitProgLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			_localctx = new ProgLineContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			functions();
			State = 44;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 43;
				line();
				}
				}
				State = 46;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 705381269534L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionsContext functions() {
			return GetRuleContext<FunctionsContext>(0);
		}
		public FunctionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterFunctions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitFunctions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionsContext functions() {
		FunctionsContext _localctx = new FunctionsContext(Context, State);
		EnterRule(_localctx, 2, RULE_functions);
		try {
			State = 52;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FUNCTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 48;
				function();
				State = 49;
				functions();
				}
				break;
			case T__0:
			case T__1:
			case T__2:
			case T__3:
			case IF:
			case WHILE:
			case DO:
			case FOR:
			case WRITE:
			case EOL:
			case VAR:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(ProdyCParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(ProdyCParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OE() { return GetToken(ProdyCParser.OE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CE() { return GetToken(ProdyCParser.CE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FnBlockContext fnBlock() {
			return GetRuleContext<FnBlockContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 4, RULE_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			Match(FUNCTION);
			State = 55;
			Match(VAR);
			State = 56;
			Match(OE);
			State = 57;
			@params();
			State = 58;
			Match(CE);
			State = 59;
			fnBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FnBlockContext : ParserRuleContext {
		public FnBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fnBlock; } }
	 
		public FnBlockContext() { }
		public virtual void CopyFrom(FnBlockContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FnBlockLineContext : FnBlockContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OB() { return GetToken(ProdyCParser.OB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FnBodyContext fnBody() {
			return GetRuleContext<FnBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CB() { return GetToken(ProdyCParser.CB, 0); }
		public FnBlockLineContext(FnBlockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterFnBlockLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitFnBlockLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnBlockLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FnBlockContext fnBlock() {
		FnBlockContext _localctx = new FnBlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_fnBlock);
		try {
			_localctx = new FnBlockLineContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			Match(OB);
			State = 62;
			fnBody();
			State = 63;
			Match(CB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FnBodyContext : ParserRuleContext {
		public FnBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fnBody; } }
	 
		public FnBodyContext() { }
		public virtual void CopyFrom(FnBodyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FnReturnLineContext : FnBodyContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(ProdyCParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(ProdyCParser.EOL, 0); }
		public FnReturnLineContext(FnBodyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterFnReturnLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitFnReturnLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnReturnLine(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FnBodyLineContext : FnBodyContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line() {
			return GetRuleContext<LineContext>(0);
		}
		public FnBodyLineContext(FnBodyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterFnBodyLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitFnBodyLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnBodyLine(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FnReturnExprLineContext : FnBodyContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(ProdyCParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(ProdyCParser.EOL, 0); }
		public FnReturnExprLineContext(FnBodyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterFnReturnExprLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitFnReturnExprLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnReturnExprLine(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FnBodyLineMoreContext : FnBodyContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line() {
			return GetRuleContext<LineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FnBodyContext fnBody() {
			return GetRuleContext<FnBodyContext>(0);
		}
		public FnBodyLineMoreContext(FnBodyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterFnBodyLineMore(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitFnBodyLineMore(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnBodyLineMore(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FnBodyContext fnBody() {
		FnBodyContext _localctx = new FnBodyContext(Context, State);
		EnterRule(_localctx, 8, RULE_fnBody);
		try {
			State = 75;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				_localctx = new FnBodyLineContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 65;
				line();
				}
				break;
			case 2:
				_localctx = new FnBodyLineMoreContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 66;
				line();
				State = 67;
				fnBody();
				}
				break;
			case 3:
				_localctx = new FnReturnExprLineContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 69;
				Match(RETURN);
				State = 70;
				expr();
				State = 71;
				Match(EOL);
				}
				break;
			case 4:
				_localctx = new FnReturnLineContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 73;
				Match(RETURN);
				State = 74;
				Match(EOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(ProdyCParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP() { return GetToken(ProdyCParser.SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		public ParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_params; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamsContext @params() {
		ParamsContext _localctx = new ParamsContext(Context, State);
		EnterRule(_localctx, 10, RULE_params);
		try {
			State = 82;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 77;
				Match(VAR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 78;
				Match(VAR);
				State = 79;
				Match(SEP);
				State = 80;
				@params();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
	 
		public LineContext() { }
		public virtual void CopyFrom(LineContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LineWhileContext : LineContext {
		[System.Diagnostics.DebuggerNonUserCode] public WhilestContext whilest() {
			return GetRuleContext<WhilestContext>(0);
		}
		public LineWhileContext(LineContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterLineWhile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitLineWhile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineWhile(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LineEOLContext : LineContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(ProdyCParser.EOL, 0); }
		public LineEOLContext(LineContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterLineEOL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitLineEOL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineEOL(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LineStmtContext : LineContext {
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(ProdyCParser.EOL, 0); }
		public LineStmtContext(LineContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterLineStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitLineStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LineIfContext : LineContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfstContext ifst() {
			return GetRuleContext<IfstContext>(0);
		}
		public LineIfContext(LineContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterLineIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitLineIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineIf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LineForContext : LineContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForstContext forst() {
			return GetRuleContext<ForstContext>(0);
		}
		public LineForContext(LineContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterLineFor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitLineFor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineFor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 12, RULE_line);
		try {
			State = 91;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__1:
			case T__2:
			case T__3:
			case WRITE:
			case VAR:
				_localctx = new LineStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 84;
				stmt();
				State = 85;
				Match(EOL);
				}
				break;
			case IF:
				_localctx = new LineIfContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 87;
				ifst();
				}
				break;
			case WHILE:
			case DO:
				_localctx = new LineWhileContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 88;
				whilest();
				}
				break;
			case FOR:
				_localctx = new LineForContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 89;
				forst();
				}
				break;
			case EOL:
				_localctx = new LineEOLContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 90;
				Match(EOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncInvocContext : ParserRuleContext {
		public FuncInvocContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcInvoc; } }
	 
		public FuncInvocContext() { }
		public virtual void CopyFrom(FuncInvocContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FuncInvocLineContext : FuncInvocContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(ProdyCParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OE() { return GetToken(ProdyCParser.OE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CE() { return GetToken(ProdyCParser.CE, 0); }
		public FuncInvocLineContext(FuncInvocContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterFuncInvocLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitFuncInvocLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncInvocLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncInvocContext funcInvoc() {
		FuncInvocContext _localctx = new FuncInvocContext(Context, State);
		EnterRule(_localctx, 14, RULE_funcInvoc);
		try {
			_localctx = new FuncInvocLineContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			Match(VAR);
			State = 94;
			Match(OE);
			State = 95;
			@params();
			State = 96;
			Match(CE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
	 
		public StmtContext() { }
		public virtual void CopyFrom(StmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StmtOutputContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public OutputContext output() {
			return GetRuleContext<OutputContext>(0);
		}
		public StmtOutputContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterStmtOutput(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitStmtOutput(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtOutput(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmtInputContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public InputContext input() {
			return GetRuleContext<InputContext>(0);
		}
		public StmtInputContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterStmtInput(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitStmtInput(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtInput(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmtAtribContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtribContext atrib() {
			return GetRuleContext<AtribContext>(0);
		}
		public StmtAtribContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterStmtAtrib(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitStmtAtrib(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtAtrib(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LineFuncInvocContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncInvocContext funcInvoc() {
			return GetRuleContext<FuncInvocContext>(0);
		}
		public LineFuncInvocContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterLineFuncInvoc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitLineFuncInvoc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineFuncInvoc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 16, RULE_stmt);
		try {
			State = 102;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				_localctx = new StmtAtribContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 98;
				atrib();
				}
				break;
			case 2:
				_localctx = new StmtInputContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 99;
				input();
				}
				break;
			case 3:
				_localctx = new StmtOutputContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 100;
				output();
				}
				break;
			case 4:
				_localctx = new LineFuncInvocContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 101;
				funcInvoc();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputContext : ParserRuleContext {
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
	 
		public InputContext() { }
		public virtual void CopyFrom(InputContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InputReadContext : InputContext {
		[System.Diagnostics.DebuggerNonUserCode] public TipoContext tipo() {
			return GetRuleContext<TipoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(ProdyCParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(ProdyCParser.VAR, 0); }
		public InputReadContext(InputContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterInputRead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitInputRead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputRead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(Context, State);
		EnterRule(_localctx, 18, RULE_input);
		try {
			_localctx = new InputReadContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			tipo();
			State = 105;
			Match(READ);
			State = 106;
			Match(VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputContext : ParserRuleContext {
		public OutputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output; } }
	 
		public OutputContext() { }
		public virtual void CopyFrom(OutputContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OutputWriteStrContext : OutputContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(ProdyCParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR() { return GetToken(ProdyCParser.STR, 0); }
		public OutputWriteStrContext(OutputContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterOutputWriteStr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitOutputWriteStr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputWriteStr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OutputWriteVarContext : OutputContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(ProdyCParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(ProdyCParser.VAR, 0); }
		public OutputWriteVarContext(OutputContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterOutputWriteVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitOutputWriteVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputWriteVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OutputWriteExprContext : OutputContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(ProdyCParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public OutputWriteExprContext(OutputContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterOutputWriteExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitOutputWriteExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputWriteExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputContext output() {
		OutputContext _localctx = new OutputContext(Context, State);
		EnterRule(_localctx, 20, RULE_output);
		try {
			State = 114;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				_localctx = new OutputWriteVarContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 108;
				Match(WRITE);
				State = 109;
				Match(VAR);
				}
				break;
			case 2:
				_localctx = new OutputWriteStrContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 110;
				Match(WRITE);
				State = 111;
				Match(STR);
				}
				break;
			case 3:
				_localctx = new OutputWriteExprContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 112;
				Match(WRITE);
				State = 113;
				expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TipoContext : ParserRuleContext {
		public TipoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tipo; } }
	 
		public TipoContext() { }
		public virtual void CopyFrom(TipoContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TipoIntContext : TipoContext {
		public TipoIntContext(TipoContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterTipoInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitTipoInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTipoInt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TipoFloatContext : TipoContext {
		public TipoFloatContext(TipoContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterTipoFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitTipoFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTipoFloat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TipoStringContext : TipoContext {
		public TipoStringContext(TipoContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterTipoString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitTipoString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTipoString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TipoBoolContext : TipoContext {
		public TipoBoolContext(TipoContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterTipoBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitTipoBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTipoBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TipoContext tipo() {
		TipoContext _localctx = new TipoContext(Context, State);
		EnterRule(_localctx, 22, RULE_tipo);
		try {
			State = 120;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				_localctx = new TipoIntContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 116;
				Match(T__0);
				}
				break;
			case T__1:
				_localctx = new TipoStringContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 117;
				Match(T__1);
				}
				break;
			case T__2:
				_localctx = new TipoFloatContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 118;
				Match(T__2);
				}
				break;
			case T__3:
				_localctx = new TipoBoolContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 119;
				Match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfstContext : ParserRuleContext {
		public IfstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifst; } }
	 
		public IfstContext() { }
		public virtual void CopyFrom(IfstContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfstIfElseContext : IfstContext {
		public BlockContext b1;
		public BlockContext b2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(ProdyCParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OE() { return GetToken(ProdyCParser.OE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CondContext cond() {
			return GetRuleContext<CondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CE() { return GetToken(ProdyCParser.CE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(ProdyCParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(ProdyCParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public IfstIfElseContext(IfstContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterIfstIfElse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitIfstIfElse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfstIfElse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfstIfContext : IfstContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(ProdyCParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OE() { return GetToken(ProdyCParser.OE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CondContext cond() {
			return GetRuleContext<CondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CE() { return GetToken(ProdyCParser.CE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(ProdyCParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfstIfContext(IfstContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterIfstIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitIfstIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfstIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfstContext ifst() {
		IfstContext _localctx = new IfstContext(Context, State);
		EnterRule(_localctx, 24, RULE_ifst);
		try {
			State = 138;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				_localctx = new IfstIfContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 122;
				Match(IF);
				State = 123;
				Match(OE);
				State = 124;
				cond(0);
				State = 125;
				Match(CE);
				State = 126;
				Match(THEN);
				State = 127;
				block();
				}
				break;
			case 2:
				_localctx = new IfstIfElseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 129;
				Match(IF);
				State = 130;
				Match(OE);
				State = 131;
				cond(0);
				State = 132;
				Match(CE);
				State = 133;
				Match(THEN);
				State = 134;
				((IfstIfElseContext)_localctx).b1 = block();
				State = 135;
				Match(ELSE);
				State = 136;
				((IfstIfElseContext)_localctx).b2 = block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhilestContext : ParserRuleContext {
		public WhilestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whilest; } }
	 
		public WhilestContext() { }
		public virtual void CopyFrom(WhilestContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WhilestDoWhileContext : WhilestContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(ProdyCParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(ProdyCParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OE() { return GetToken(ProdyCParser.OE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CondContext cond() {
			return GetRuleContext<CondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CE() { return GetToken(ProdyCParser.CE, 0); }
		public WhilestDoWhileContext(WhilestContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterWhilestDoWhile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitWhilestDoWhile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhilestDoWhile(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhilestWhileContext : WhilestContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(ProdyCParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OE() { return GetToken(ProdyCParser.OE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CondContext cond() {
			return GetRuleContext<CondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CE() { return GetToken(ProdyCParser.CE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhilestWhileContext(WhilestContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterWhilestWhile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitWhilestWhile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhilestWhile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhilestContext whilest() {
		WhilestContext _localctx = new WhilestContext(Context, State);
		EnterRule(_localctx, 26, RULE_whilest);
		try {
			State = 153;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHILE:
				_localctx = new WhilestWhileContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 140;
				Match(WHILE);
				State = 141;
				Match(OE);
				State = 142;
				cond(0);
				State = 143;
				Match(CE);
				State = 144;
				block();
				}
				break;
			case DO:
				_localctx = new WhilestDoWhileContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 146;
				Match(DO);
				State = 147;
				block();
				State = 148;
				Match(WHILE);
				State = 149;
				Match(OE);
				State = 150;
				cond(0);
				State = 151;
				Match(CE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForstContext : ParserRuleContext {
		public ForstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forst; } }
	 
		public ForstContext() { }
		public virtual void CopyFrom(ForstContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ForstForContext : ForstContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(ProdyCParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OE() { return GetToken(ProdyCParser.OE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(ProdyCParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(ProdyCParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CE() { return GetToken(ProdyCParser.CE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtribContext[] atrib() {
			return GetRuleContexts<AtribContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtribContext atrib(int i) {
			return GetRuleContext<AtribContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondContext cond() {
			return GetRuleContext<CondContext>(0);
		}
		public ForstForContext(ForstContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterForstFor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitForstFor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForstFor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForstContext forst() {
		ForstContext _localctx = new ForstContext(Context, State);
		EnterRule(_localctx, 28, RULE_forst);
		int _la;
		try {
			_localctx = new ForstForContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			Match(FOR);
			State = 156;
			Match(OE);
			State = 158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 30L) != 0)) {
				{
				State = 157;
				atrib();
				}
			}

			State = 160;
			Match(EOL);
			State = 162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 824633851936L) != 0)) {
				{
				State = 161;
				cond(0);
				}
			}

			State = 164;
			Match(EOL);
			State = 166;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 30L) != 0)) {
				{
				State = 165;
				atrib();
				}
			}

			State = 168;
			Match(CE);
			State = 169;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	 
		public BlockContext() { }
		public virtual void CopyFrom(BlockContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BlockLineContext : BlockContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OB() { return GetToken(ProdyCParser.OB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CB() { return GetToken(ProdyCParser.CB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public BlockLineContext(BlockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterBlockLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitBlockLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 30, RULE_block);
		int _la;
		try {
			_localctx = new BlockLineContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 171;
			Match(OB);
			State = 173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 172;
				line();
				}
				}
				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 705381269534L) != 0) );
			State = 177;
			Match(CB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondContext : ParserRuleContext {
		public CondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cond; } }
	 
		public CondContext() { }
		public virtual void CopyFrom(CondContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CondRelopContext : CondContext {
		public ExprContext e1;
		public IToken RELOP;
		public ExprContext e2;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(ProdyCParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE() { return GetToken(ProdyCParser.NE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(ProdyCParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(ProdyCParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(ProdyCParser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(ProdyCParser.GE, 0); }
		public CondRelopContext(CondContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterCondRelop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitCondRelop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondRelop(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CondExprContext : CondContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public CondExprContext(CondContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterCondExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitCondExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CondAndContext : CondContext {
		public CondContext c1;
		public CondContext c2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(ProdyCParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CondContext[] cond() {
			return GetRuleContexts<CondContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondContext cond(int i) {
			return GetRuleContext<CondContext>(i);
		}
		public CondAndContext(CondContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterCondAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitCondAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CondOrContext : CondContext {
		public CondContext c1;
		public CondContext c2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(ProdyCParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CondContext[] cond() {
			return GetRuleContexts<CondContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondContext cond(int i) {
			return GetRuleContext<CondContext>(i);
		}
		public CondOrContext(CondContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterCondOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitCondOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CondNotContext : CondContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(ProdyCParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CondContext cond() {
			return GetRuleContext<CondContext>(0);
		}
		public CondNotContext(CondContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterCondNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitCondNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondNot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondContext cond() {
		return cond(0);
	}

	private CondContext cond(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		CondContext _localctx = new CondContext(Context, _parentState);
		CondContext _prevctx = _localctx;
		int _startState = 32;
		EnterRecursionRule(_localctx, 32, RULE_cond, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				_localctx = new CondExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 180;
				expr();
				}
				break;
			case 2:
				{
				_localctx = new CondRelopContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 181;
				((CondRelopContext)_localctx).e1 = expr();
				State = 182;
				((CondRelopContext)_localctx).RELOP = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 16515072L) != 0)) ) {
					((CondRelopContext)_localctx).RELOP = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 183;
				((CondRelopContext)_localctx).e2 = expr();
				}
				break;
			case 3:
				{
				_localctx = new CondNotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 185;
				Match(NOT);
				State = 186;
				cond(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 197;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 195;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
					case 1:
						{
						_localctx = new CondAndContext(new CondContext(_parentctx, _parentState));
						((CondAndContext)_localctx).c1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_cond);
						State = 189;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 190;
						Match(AND);
						State = 191;
						((CondAndContext)_localctx).c2 = cond(4);
						}
						break;
					case 2:
						{
						_localctx = new CondOrContext(new CondContext(_parentctx, _parentState));
						((CondOrContext)_localctx).c1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_cond);
						State = 192;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 193;
						Match(OR);
						State = 194;
						((CondOrContext)_localctx).c2 = cond(3);
						}
						break;
					}
					} 
				}
				State = 199;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AtribContext : ParserRuleContext {
		public AtribContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atrib; } }
	 
		public AtribContext() { }
		public virtual void CopyFrom(AtribContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AtribVarStrContext : AtribContext {
		[System.Diagnostics.DebuggerNonUserCode] public TipoContext tipo() {
			return GetRuleContext<TipoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(ProdyCParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(ProdyCParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR() { return GetToken(ProdyCParser.STR, 0); }
		public AtribVarStrContext(AtribContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterAtribVarStr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitAtribVarStr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtribVarStr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtribVarContext : AtribContext {
		[System.Diagnostics.DebuggerNonUserCode] public TipoContext tipo() {
			return GetRuleContext<TipoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(ProdyCParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(ProdyCParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AtribVarContext(AtribContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterAtribVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitAtribVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtribVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtribContext atrib() {
		AtribContext _localctx = new AtribContext(Context, State);
		EnterRule(_localctx, 34, RULE_atrib);
		try {
			State = 210;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				_localctx = new AtribVarContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 200;
				tipo();
				State = 201;
				Match(VAR);
				State = 202;
				Match(AT);
				State = 203;
				expr();
				}
				break;
			case 2:
				_localctx = new AtribVarStrContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 205;
				tipo();
				State = 206;
				Match(VAR);
				State = 207;
				Match(AT);
				State = 208;
				Match(STR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprPlusContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(ProdyCParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprPlusContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterExprPlus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitExprPlus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprPlus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprMinusContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ProdyCParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprMinusContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterExprMinus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitExprMinus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprMinus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprTermContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ExprTermContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterExprTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitExprTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 36, RULE_expr);
		try {
			State = 221;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				_localctx = new ExprPlusContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 212;
				term();
				State = 213;
				Match(PLUS);
				State = 214;
				expr();
				}
				break;
			case 2:
				_localctx = new ExprMinusContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 216;
				term();
				State = 217;
				Match(MINUS);
				State = 218;
				expr();
				}
				break;
			case 3:
				_localctx = new ExprTermContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 220;
				term();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	 
		public TermContext() { }
		public virtual void CopyFrom(TermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TermDivContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(ProdyCParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public TermDivContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterTermDiv(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitTermDiv(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TermMultContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(ProdyCParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public TermMultContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterTermMult(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitTermMult(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermMult(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TermFactorContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public TermFactorContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterTermFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitTermFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 38, RULE_term);
		try {
			State = 232;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				_localctx = new TermMultContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 223;
				factor();
				State = 224;
				Match(MULT);
				State = 225;
				term();
				}
				break;
			case 2:
				_localctx = new TermDivContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 227;
				factor();
				State = 228;
				Match(DIV);
				State = 229;
				term();
				}
				break;
			case 3:
				_localctx = new TermFactorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 231;
				factor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
	 
		public FactorContext() { }
		public virtual void CopyFrom(FactorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FactorNumContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(ProdyCParser.NUM, 0); }
		public FactorNumContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterFactorNum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitFactorNum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactorNum(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FactorVarContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(ProdyCParser.VAR, 0); }
		public FactorVarContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterFactorVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitFactorVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactorVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FactorExprContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OE() { return GetToken(ProdyCParser.OE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CE() { return GetToken(ProdyCParser.CE, 0); }
		public FactorExprContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.EnterFactorExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProdyCListener typedListener = listener as IProdyCListener;
			if (typedListener != null) typedListener.ExitFactorExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProdyCVisitor<TResult> typedVisitor = visitor as IProdyCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactorExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 40, RULE_factor);
		try {
			State = 240;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OE:
				_localctx = new FactorExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 234;
				Match(OE);
				State = 235;
				expr();
				State = 236;
				Match(CE);
				}
				break;
			case VAR:
				_localctx = new FactorVarContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 238;
				Match(VAR);
				}
				break;
			case NUM:
				_localctx = new FactorNumContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 239;
				Match(NUM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 16: return cond_sempred((CondContext)_localctx, predIndex);
		}
		return true;
	}
	private bool cond_sempred(CondContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,41,243,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,1,0,1,0,4,
		0,45,8,0,11,0,12,0,46,1,1,1,1,1,1,1,1,3,1,53,8,1,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,76,8,
		4,1,5,1,5,1,5,1,5,1,5,3,5,83,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,92,8,
		6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,3,8,103,8,8,1,9,1,9,1,9,1,9,1,10,
		1,10,1,10,1,10,1,10,1,10,3,10,115,8,10,1,11,1,11,1,11,1,11,3,11,121,8,
		11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
		12,1,12,1,12,3,12,139,8,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
		1,13,1,13,1,13,1,13,3,13,154,8,13,1,14,1,14,1,14,3,14,159,8,14,1,14,1,
		14,3,14,163,8,14,1,14,1,14,3,14,167,8,14,1,14,1,14,1,14,1,15,1,15,4,15,
		174,8,15,11,15,12,15,175,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
		1,16,3,16,188,8,16,1,16,1,16,1,16,1,16,1,16,1,16,5,16,196,8,16,10,16,12,
		16,199,9,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,211,
		8,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,222,8,18,1,19,1,
		19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,233,8,19,1,20,1,20,1,20,1,20,
		1,20,1,20,3,20,241,8,20,1,20,0,1,32,21,0,2,4,6,8,10,12,14,16,18,20,22,
		24,26,28,30,32,34,36,38,40,0,1,1,0,18,23,257,0,42,1,0,0,0,2,52,1,0,0,0,
		4,54,1,0,0,0,6,61,1,0,0,0,8,75,1,0,0,0,10,82,1,0,0,0,12,91,1,0,0,0,14,
		93,1,0,0,0,16,102,1,0,0,0,18,104,1,0,0,0,20,114,1,0,0,0,22,120,1,0,0,0,
		24,138,1,0,0,0,26,153,1,0,0,0,28,155,1,0,0,0,30,171,1,0,0,0,32,187,1,0,
		0,0,34,210,1,0,0,0,36,221,1,0,0,0,38,232,1,0,0,0,40,240,1,0,0,0,42,44,
		3,2,1,0,43,45,3,12,6,0,44,43,1,0,0,0,45,46,1,0,0,0,46,44,1,0,0,0,46,47,
		1,0,0,0,47,1,1,0,0,0,48,49,3,4,2,0,49,50,3,2,1,0,50,53,1,0,0,0,51,53,1,
		0,0,0,52,48,1,0,0,0,52,51,1,0,0,0,53,3,1,0,0,0,54,55,5,30,0,0,55,56,5,
		39,0,0,56,57,5,5,0,0,57,58,3,10,5,0,58,59,5,6,0,0,59,60,3,6,3,0,60,5,1,
		0,0,0,61,62,5,7,0,0,62,63,3,8,4,0,63,64,5,8,0,0,64,7,1,0,0,0,65,76,3,12,
		6,0,66,67,3,12,6,0,67,68,3,8,4,0,68,76,1,0,0,0,69,70,5,31,0,0,70,71,3,
		36,18,0,71,72,5,37,0,0,72,76,1,0,0,0,73,74,5,31,0,0,74,76,5,37,0,0,75,
		65,1,0,0,0,75,66,1,0,0,0,75,69,1,0,0,0,75,73,1,0,0,0,76,9,1,0,0,0,77,83,
		5,39,0,0,78,79,5,39,0,0,79,80,5,10,0,0,80,83,3,10,5,0,81,83,1,0,0,0,82,
		77,1,0,0,0,82,78,1,0,0,0,82,81,1,0,0,0,83,11,1,0,0,0,84,85,3,16,8,0,85,
		86,5,37,0,0,86,92,1,0,0,0,87,92,3,24,12,0,88,92,3,26,13,0,89,92,3,28,14,
		0,90,92,5,37,0,0,91,84,1,0,0,0,91,87,1,0,0,0,91,88,1,0,0,0,91,89,1,0,0,
		0,91,90,1,0,0,0,92,13,1,0,0,0,93,94,5,39,0,0,94,95,5,5,0,0,95,96,3,10,
		5,0,96,97,5,6,0,0,97,15,1,0,0,0,98,103,3,34,17,0,99,103,3,18,9,0,100,103,
		3,20,10,0,101,103,3,14,7,0,102,98,1,0,0,0,102,99,1,0,0,0,102,100,1,0,0,
		0,102,101,1,0,0,0,103,17,1,0,0,0,104,105,3,22,11,0,105,106,5,35,0,0,106,
		107,5,39,0,0,107,19,1,0,0,0,108,109,5,34,0,0,109,115,5,39,0,0,110,111,
		5,34,0,0,111,115,5,36,0,0,112,113,5,34,0,0,113,115,3,36,18,0,114,108,1,
		0,0,0,114,110,1,0,0,0,114,112,1,0,0,0,115,21,1,0,0,0,116,121,5,1,0,0,117,
		121,5,2,0,0,118,121,5,3,0,0,119,121,5,4,0,0,120,116,1,0,0,0,120,117,1,
		0,0,0,120,118,1,0,0,0,120,119,1,0,0,0,121,23,1,0,0,0,122,123,5,26,0,0,
		123,124,5,5,0,0,124,125,3,32,16,0,125,126,5,6,0,0,126,127,5,32,0,0,127,
		128,3,30,15,0,128,139,1,0,0,0,129,130,5,26,0,0,130,131,5,5,0,0,131,132,
		3,32,16,0,132,133,5,6,0,0,133,134,5,32,0,0,134,135,3,30,15,0,135,136,5,
		33,0,0,136,137,3,30,15,0,137,139,1,0,0,0,138,122,1,0,0,0,138,129,1,0,0,
		0,139,25,1,0,0,0,140,141,5,27,0,0,141,142,5,5,0,0,142,143,3,32,16,0,143,
		144,5,6,0,0,144,145,3,30,15,0,145,154,1,0,0,0,146,147,5,28,0,0,147,148,
		3,30,15,0,148,149,5,27,0,0,149,150,5,5,0,0,150,151,3,32,16,0,151,152,5,
		6,0,0,152,154,1,0,0,0,153,140,1,0,0,0,153,146,1,0,0,0,154,27,1,0,0,0,155,
		156,5,29,0,0,156,158,5,5,0,0,157,159,3,34,17,0,158,157,1,0,0,0,158,159,
		1,0,0,0,159,160,1,0,0,0,160,162,5,37,0,0,161,163,3,32,16,0,162,161,1,0,
		0,0,162,163,1,0,0,0,163,164,1,0,0,0,164,166,5,37,0,0,165,167,3,34,17,0,
		166,165,1,0,0,0,166,167,1,0,0,0,167,168,1,0,0,0,168,169,5,6,0,0,169,170,
		3,30,15,0,170,29,1,0,0,0,171,173,5,7,0,0,172,174,3,12,6,0,173,172,1,0,
		0,0,174,175,1,0,0,0,175,173,1,0,0,0,175,176,1,0,0,0,176,177,1,0,0,0,177,
		178,5,8,0,0,178,31,1,0,0,0,179,180,6,16,-1,0,180,188,3,36,18,0,181,182,
		3,36,18,0,182,183,7,0,0,0,183,184,3,36,18,0,184,188,1,0,0,0,185,186,5,
		17,0,0,186,188,3,32,16,1,187,179,1,0,0,0,187,181,1,0,0,0,187,185,1,0,0,
		0,188,197,1,0,0,0,189,190,10,3,0,0,190,191,5,15,0,0,191,196,3,32,16,4,
		192,193,10,2,0,0,193,194,5,16,0,0,194,196,3,32,16,3,195,189,1,0,0,0,195,
		192,1,0,0,0,196,199,1,0,0,0,197,195,1,0,0,0,197,198,1,0,0,0,198,33,1,0,
		0,0,199,197,1,0,0,0,200,201,3,22,11,0,201,202,5,39,0,0,202,203,5,9,0,0,
		203,204,3,36,18,0,204,211,1,0,0,0,205,206,3,22,11,0,206,207,5,39,0,0,207,
		208,5,9,0,0,208,209,5,36,0,0,209,211,1,0,0,0,210,200,1,0,0,0,210,205,1,
		0,0,0,211,35,1,0,0,0,212,213,3,38,19,0,213,214,5,11,0,0,214,215,3,36,18,
		0,215,222,1,0,0,0,216,217,3,38,19,0,217,218,5,12,0,0,218,219,3,36,18,0,
		219,222,1,0,0,0,220,222,3,38,19,0,221,212,1,0,0,0,221,216,1,0,0,0,221,
		220,1,0,0,0,222,37,1,0,0,0,223,224,3,40,20,0,224,225,5,13,0,0,225,226,
		3,38,19,0,226,233,1,0,0,0,227,228,3,40,20,0,228,229,5,14,0,0,229,230,3,
		38,19,0,230,233,1,0,0,0,231,233,3,40,20,0,232,223,1,0,0,0,232,227,1,0,
		0,0,232,231,1,0,0,0,233,39,1,0,0,0,234,235,5,5,0,0,235,236,3,36,18,0,236,
		237,5,6,0,0,237,241,1,0,0,0,238,241,5,39,0,0,239,241,5,38,0,0,240,234,
		1,0,0,0,240,238,1,0,0,0,240,239,1,0,0,0,241,41,1,0,0,0,21,46,52,75,82,
		91,102,114,120,138,153,158,162,166,175,187,195,197,210,221,232,240
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
